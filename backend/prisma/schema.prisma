generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id
  email      String     @unique
  password   String
  name       String
  age        Int?
  goals      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
  exercises  Exercise[]
  progress   Progress[]
  workouts   Workout[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  exercises Exercise[]
}

model Exercise {
  id               String            @id @default(cuid())
  name             String
  type             String?
  youtubeUrl       String?
  notes            String?
  equipment        String?
  userId           String
  categoryId       String?
  category         Category?         @relation(fields: [categoryId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  workoutExercises WorkoutExercise[]
}

model Workout {
  id               String            @id @default(cuid())
  name             String
  date             DateTime?
  userId           String
  user             User              @relation(fields: [userId], references: [id])
  workoutExercises WorkoutExercise[]
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String
  exerciseId String
  sets       Int
  reps       Int
  weight     Float?
  order      Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  workout    Workout  @relation(fields: [workoutId], references: [id])
}

model Progress {
  id         String   @id @default(cuid())
  userId     String
  date       DateTime @default(now())
  weight     Float
  bodyFat    Float?
  muscleMass Float?
  notes      String?
  user       User     @relation(fields: [userId], references: [id])
}
